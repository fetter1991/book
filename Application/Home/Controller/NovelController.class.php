<?phpnamespace Home\Controller;use Home\Controller\BaseController;use Think\Controller;use QL\QueryList;class NovelController extends BaseController {	private $sever = 'http://m.myshuge.org';	public function index() {		$this->display();	}	//详情&目录	public function article() {		$this->display();	}	//阅读页	public function read() {		//$this->display();	}	//操作	public function getBook() {		$this->display();	}	public function getImg() {		// 采集规则		$url = 'http://www.mx-fm.com/fmsc/tags/dushi/';		$fp  = fopen( './href.txt', 'a+' );		for ( $i = 1; $i <= 21; $i ++ ) {			$data = QueryList::Query( 'http://www.mx-fm.com/fmsc/nan/' . $i,				[ 'a' => [ 'a', 'href' ] ] )->data;			foreach ( $data as $key => $val ) {				if ( strpos( $val['a'], "html" ) ) {					if ( strpos( $val['a'], "/nv/" ) || strpos( $val['a'], "/nan/" ) ) {						fwrite( $fp, $val['a'] . "\r\n" );					}				}			}		}		fclose( $fp );	}	public function getCover() {		$link = M( 'href' )->where( 'is_check = 0' )->find();		$url  = $link['link'];		$data = QueryList::Query( $url, [ 'img' => [ 'img:eq(4)', 'src' ] ] )->data;		if ( ! $data ) {			$saveData['is_check'] = 2;			$res                  = M( 'href' )->where( 'id = ' . $link['id'] )->save( $saveData );			$this->ajaxReturn( array( 'msg' => $res ) );		} else {			$add['img_href'] = $data[0]['img'];			$res             = M( 'img' )->add( $add );			if ( $res ) {				$up['is_check'] = 1;				$update         = M( 'href' )->where( 'id = ' . $link['id'] )->save( $up );				$this->ajaxReturn( array( 'msg' => $update ) );			}		}	}	//获取小说列表	public function getNovelList() {		//分类&页数		$list = array(			'1'  => 3,			'2'  => 4,			'3'  => 93,			'4'  => 11,			'5'  => 5,			'6'  => 28,			'7'  => 5,			'8'  => 7,			'9'  => 59,			'10' => 490,		);		// 采集规则		$rules = [			// 小说标题			'title'   => [ 'p:eq(0)', 'text' ],			// 小说链接地址			'link'    => [ 'a:eq(0)', 'href' ],			// 小说作者			'author'  => [ 'p:eq(1)', 'text' ],			// 小说简介			'summary' => [ 'p:eq(2)', 'text' ]		];		// 切片选择器		$range = '#main>.hot_sale';		foreach ( $list as $key => $item ) {			// 待采集的页面地址			for ( $i = 1; $i <= $item; $i ++ ) {				$url = $this->sever . '/xclass/' . $key;				$url .= '/' . $i . '.html';//				//TODO 执行采集入库//				$data = '';//				$data = QueryList::Query( $url, $rules, $range )->data;////				foreach ( $data as $k => $v ) {//					$v['novel_type'] = $key;//					$v['page'] = $i;//					$res             = M( 'novel' )->add( $v );//					print_r( $res );//				}			}		}	}	//获取小说章节列表	public function getNovelChapterList() {		$maxId = M( 'chapter' )->field( "max(novel_id) as max" )->find();		$list  = M( 'novel' )->where( 'id > ' . intval( $maxId['max'] ) )->limit( 1 )->select();		// 采集规则		$rules = [			// 小说标题			'name' => [ 'a:eq(0)', 'text' ],			// 小说链接地址			'link' => [ 'a:eq(0)', 'href' ]		];		// 切片选择器		$range = '#chapterlist>p';		$result = array();		foreach ( $list as $key => $value ) {			// 待采集的页面地址			$url = '';			$url = $this->sever . $value['link'] . 'all.html';			$data = '';			$data = QueryList::Query( $url, $rules, $range )->data;			if ( count( $data ) <= 1 ) {				$data['novel_id'] = $value['id'];				$data['sortrank'] = 999;				$data['status']   = 2;				$data['add_time'] = time();				$res              = M( 'chapter' )->add( $data );			} else {				foreach ( $data as $k => $item ) {					$isExist = M( 'chapter' )->where( 'novel_id = ' . $value['id'] . ' and name = "' . $item['name'] . '"' )->find();					if ( ! $isExist && $item['name'] != '↓直达页面底部' ) {						$item['novel_id'] = $value['id'];						$item['sortrank'] = $k;						$item['status']   = 1;						$item['add_time'] = time();						$res              = M( 'chapter' )->add( $item );						array_push( $result, $res );					}				}			}		}		$this->ajaxReturn( $result );	}	//获取小说章节内容	public function getChapterContent() {		$maxId = M( 'chapter_content' )->field( "max(chapter_id) as max" )->find();		$list  = M( 'chapter' )->where( 'id > ' . intval( $maxId['max'] ) )->find();		// 采集规则		$rules = [			// 小说标题			'reading' => [ '#chaptercontent', 'text' ]		];		$url = '';		$url = $this->sever . $list['link'];		$data = '';		$data = QueryList::Query( $url, $rules )->data;		if ( $data ) {			$isExist = M( 'chapter_content' )->where( 'chapter_id = ' . $list['id'] )->find();			if ( ! $isExist ) {				$save['chapter_id'] = $list['id'];				$save['reading']    = $data[0]['reading'];				$save['sortrank']   = 1;				$save['status']     = 1;				$save['add_time']   = time();				$res                = M( 'chapter_content' )->add( $save );				$this->ajaxReturn( array( 'code' => $res ? $res : 0 ) );			}		} else {			$data['chapter_id'] = $list['id'];			$data['sortrank']   = 0;			$data['reading']    = '';			$data['status']     = 2;			$data['add_time']   = time();			$res                = M( 'chapter_content' )->add( $data );			$this->ajaxReturn( array( 'code' => $res ? $res : 0 ) );		}	}}