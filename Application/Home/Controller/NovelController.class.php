<?phpnamespace Home\Controller;use Home\Controller\BaseController;use Think\Controller;use QL\QueryList;class NovelController extends BaseController {	private $sever = 'http://m.myshuge.org';	public function index() {		echo 1;	}	public function test() {		$list = array(			'2'  => 4,			'3'  => 93,			'4'  => 11,			'5'  => 5,			'6'  => 28,			'7'  => 5,			'8'  => 7,			'9'  => 59,			'10' => 490,		);		// 待采集的页面地址		$url = 'http://m.myshuge.org/xclass/2/3.html';		// 采集规则		$rules = [			// 小说标题			'title'   => [ 'p:eq(0)', 'text' ],			// 小说链接地址			'link'    => [ 'a:eq(0)', 'href' ],			// 小说作者			'author'  => [ 'p:eq(1)', 'text' ],			// 小说简介			'summary' => [ 'p:eq(2)', 'text' ]		];		// 切片选择器		$range = '#main>.hot_sale';		$data = QueryList::Query( $url, $rules, $range )->data;		foreach ( $data as $key => $v ) {			$v['novel_type'] = 1;			$res             = M( 'novel' )->add( $v );			print_r( $res );		}	}	//获取小说列表	public function getNovelList() {		//分类&页数		$list = array(//			'1'  => 3,//			'2'  => 4,			'3'  => 93,			'4'  => 11,			'5'  => 5,			'6'  => 28,			'7'  => 5,			'8'  => 7,			'9'  => 59,			'10' => 490,		);		// 采集规则		$rules = [			// 小说标题			'title'   => [ 'p:eq(0)', 'text' ],			// 小说链接地址			'link'    => [ 'a:eq(0)', 'href' ],			// 小说作者			'author'  => [ 'p:eq(1)', 'text' ],			// 小说简介			'summary' => [ 'p:eq(2)', 'text' ]		];		// 切片选择器		$range = '#main>.hot_sale';		foreach ( $list as $key => $item ) {			// 待采集的页面地址			for ( $i = 1; $i <= $item; $i ++ ) {				$url = $this->sever . '/xclass/' . $key;				$url .= '/' . $i . '.html';//				//TODO 执行采集入库//				$data = '';//				$data = QueryList::Query( $url, $rules, $range )->data;////				foreach ( $data as $k => $v ) {//					$v['novel_type'] = $key;//					$v['page'] = $i;//					$res             = M( 'novel' )->add( $v );//					print_r( $res );//				}			}		}	}	//获取小说章节列表	public function getNovelChapterList() {		$where['novel_type'] = '2';		$list                = M( 'novel' )->where( $where )->limit( 1 )->select();		// 采集规则		$rules = [			// 小说标题			'name' => [ 'a:eq(0)', 'text' ],			// 小说链接地址			'link' => [ 'a:eq(0)', 'href' ]		];		// 切片选择器		$range = '#chapterlist>p';		foreach ( $list as $key => $value ) {			// 待采集的页面地址			$url = '';			$url = $this->sever . $value['link'] . 'all.html';			$data = '';			$data = QueryList::Query( $url, $rules, $range )->data;			foreach ( $data as $k => $item ) {				$isExist = M( 'chapter' )->where( 'novel_id = ' . $value['id'] . ' and name = "' . $item['name'] . '"' )->find();				if ( ! $isExist && $item['name'] != '↓直达页面底部' ) {					$item['novel_id'] = $value['id'];					$item['sortrank'] = $k;					$item['status']   = 1;					$item['add_time'] = time();					$res              = M( 'chapter' )->add( $item );					print_r( $res );				}			}		}	}	//获取小说章节内容	public function getChapterContent() {		$list = M( 'chapter' )->limit( 2 )->select();		// 采集规则		$rules = [			// 小说标题			'reading' => [ '#chaptercontent', 'text' ]		];		foreach ( $list as $key => $value ) {			$url = '';			$url = $this->sever . $value['link'];			$data = '';			$data = QueryList::Query( $url, $rules )->data;			foreach ( $data as $k => $item ) {				$isExist = M( 'chapter_content' )->where( 'chapter_id = ' . $value['id'] )->find();				if (!$isExist){					$item['chapter_id'] = $value['id'];					$item['sortrank'] = $k;					$item['status']   = 1;					$item['add_time'] = time();					$res              = M( 'chapter_content' )->add( $item );				}			}		}	}}